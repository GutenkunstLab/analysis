import pathlib

import stairway
import smc
import simulations
import plots
import numpy as np
import sys
import os

stairwayplot_code = "stairwayplot/swarmops.jar"

seed = 12345
np.random.seed(seed)

reps = 2 
seed_array = np.random.random_integers(1,2**31,reps)
chrm_list = ["chr22"]
rule all:
   input:
       expand("homo_sapiens_Gutenkunst/{seeds}.{chrms}.estimated_Ne.png",
		seeds=seed_array, chrms=chrm_list),
       "homo_sapiens_Gutenkunst/estimated_Ne.png",
        expand("homo_sapiens_Gutenkunst/{seeds}.{chrms}.trees.smc.gz.final.json.csv",
		seeds=seed_array, chrms=chrm_list),
	"homo_sapiens_Gutenkunst/smcpp_estimated_Ne.png",
        "homo_sapiens_Gutenkunst/all_estimated_Ne.png"

rule sp_download:
    output:
        stairwayplot_code
    message:
        "downloading stairwayplot"
    shell:
        "wget http://sesame.uoregon.edu/~adkern/stdpopsim/stairwayplot.tar.gz && \
        tar zxf stairwayplot.tar.gz"

rule homo_sapiens_Gutenkunst_simulation:
    output:
        "homo_sapiens_Gutenkunst/{seeds}.{chrms}.trees"
    # TODO get simulation parameters from stdpopsim, so we can share them easily 
    # with anlysis code below?
    run: simulations.homo_sapiens_Gutenkunst(output[0], wildcards.seeds, wildcards.chrms)

rule homo_sapiens_Gutenkunst_stairwayplot:
    input:
        "homo_sapiens_Gutenkunst/{seeds}.{chrms}.trees",
        stairwayplot_code,
    output:
        "homo_sapiens_Gutenkunst/{seeds}.{chrms}.estimated_Ne.txt"
    threads: 8
    run: 
        runner = stairway.StairwayPlotRunner(
            workdir="homo_sapiens_Gutenkunst/stairwayplot/"+wildcards.seeds+"/",
            stairway_dir=pathlib.Path.cwd() / "stairwayplot")
        runner.ts_to_stairway(input[0], num_bootstraps=10)
        runner.run_theta_estimation(max_workers=threads, show_progress=True)
        # TODO get the rate here from stdpopsim. 
        runner.run_summary(output[0], mutation_rate=1e-8, generation_time=10)

rule homo_sapiens_Gutenkunst_stairwayplot_plot:
    input:
        "homo_sapiens_Gutenkunst/{seeds}.{chrms}.estimated_Ne.txt"
    output:
        "homo_sapiens_Gutenkunst/{seeds}.{chrms}.estimated_Ne.png"
    run: plots.plot_stairway_Ne_estimate(input[0], output[0])

def ne_files(wildcards):
    return expand("homo_sapiens_Gutenkunst/{seeds}.{chrms}.estimated_Ne.txt", \
            seeds=seed_array, chrms=chrm_list)

rule homo_sapiens_compound_stairwayplot:
    input:
        ne_files
    output:
        "homo_sapiens_Gutenkunst/estimated_Ne.png"
    run: plots.plot_compound_Ne_estimate(input, output[0])


rule homo_sapiens_smcpp:
    input:
        "homo_sapiens_Gutenkunst/{seeds}.{chrms}.trees"
    output:
        "homo_sapiens_Gutenkunst/{seeds}.{chrms}.trees.smc.gz.final.json"
    threads: 8
    run:
        os.chdir("homo_sapiens_Gutenkunst")
        fn = os.path.basename(input[0])
        smc.write_smcpp_file(fn)
        # TODO get the rate here from stdpopsim
        smc.run_smcpp_estimate(fn + ".smc.gz", mutation_rate=1e-8, ncores=threads)
        os.chdir("../")

rule homo_sapiens_smcpp_plot:
    input: rules.homo_sapiens_smcpp.output
    output: "homo_sapiens_Gutenkunst/{seeds}.{chrms}.trees.smc.gz.final.json.csv"
    run:
        # TODO get the genetion time from std source
        smc.run_smcpp_plot(input[0], generation_time=10)

def ne_files_smcpp(wildcards):
    return expand("homo_sapiens_Gutenkunst/{seeds}.{chrms}.trees.smc.gz.final.json.csv", \
            seeds=seed_array, chrms=chrm_list)

rule homo_sapiens_compound_smcpp:
    input:
        ne_files_smcpp
    output:
        "homo_sapiens_Gutenkunst/smcpp_estimated_Ne.png"
    run: plots.plot_compound_smcpp(input, output[0])

rule homo_sapiens_all_plot:
    input:
        f1 = ne_files,
        f2 = ne_files_smcpp,
    output:
        "homo_sapiens_Gutenkunst/all_estimated_Ne.png"
    run: plots.plot_all_ne_estimates(input.f1, input.f2, output[0])

rule clean:
    shell:
        "rm -rf stairwayplot stairwayplot.tar.gz"
        "rm -fr homo_sapiens_Gutenkunst"
