import pathlib
import sys

import numpy as np
import stdpopsim

import dadi_utils

genetic_map_downloaded_flag= ".genetic_map_downloaded"
hpc_check = os.environ.get('PBS_O_WORKDIR')

#General settings
seed = 12345
np.random.seed(seed)
if hpc_check == None:
    sim_reps = 2
    seed_array = np.random.random_integers(1,2**31,sim_reps)

    fit_runs = 2
    dadi_seed_array = np.random.randint(0, 4294967295 + 1, fit_runs)

else:
    sim_reps = 5
    seed_array = np.random.random_integers(1,2**31,sim_reps)

    fit_runs = 50
    dadi_seed_array = np.random.randint(0, 4294967295 + 1, fit_runs)

#dadi models to fit to msprime simulated data
demo_models_list = ['IM','split_mig']#,'IM_pre']


#Organism options
#human models and chromosomes
chrm_list = list(stdpopsim.homo_sapiens.genome.chromosomes.keys())[-4:-2]
org_models_list = ['homo_sapiens_GutenkunstThreePopOutOfAfrica', 'homo_sapiens_TennessenTwoPopOutOfAfrica', 'homo_sapiens_BrowningAmerica']

# #drosophila models and chromosomes
# chrm_list = list(stdpopsim.drosophila_melanogaster.genome.chromosomes.keys())[:2]
# org_models_list = ['drosophila_melanogaster_LiStephanTwoPopulation']

# #pongo models and chromosomes
# #Currently using human genome as base, change if pongo genome added
# chrm_list = list(stdpopsim.homo_sapiens.genome.chromosomes.keys())[:2]
# org_models_list = ['pongo_LockeEtAlPongoIM']

#We only fit autosome chromosomes, so we remove the others.
chrm_list = [chrom for chrom in chrm_list if 'X' not in chrom and 'Y' not in chrom and 'M' not in chrom]
print(chrm_list)

rule all:
   input:
       expand("simulated_data/{org_models}/msprime_joint_sfs_{sim_seeds}_{chrms}.fs",
       org_models=org_models_list, sim_seeds=seed_array, chrms=chrm_list),
       # "results_comparison/homo_sapiens_GutenkunstThreePopOutOfAfrica/compare_dadi_to_msprime_joint_sfs_resid_range_50.pdf",
       expand("results_fits/{org_models}/{demo_models}/model_fit_{sim_seeds}_{fit_seeds}.pdf",
        org_models=org_models_list, demo_models=demo_models_list, sim_seeds=seed_array, fit_seeds=dadi_seed_array),
       expand("results_fits/{org_models}/{demo_models}/model_params_{sim_seeds}_{fit_seeds}.txt",
        org_models=org_models_list, demo_models=demo_models_list, sim_seeds=seed_array, fit_seeds=dadi_seed_array)

rule download_genetic_map:
    output: genetic_map_downloaded_flag
    message: "Downloading default genetic map"
    run:
        # We need to have this here to avoid several threads trying to download the 
        # the genetic map into the cache at the same time.
        genetic_map = stdpopsim.homo_sapiens.HapmapII_GRCh37()
        if not genetic_map.is_cached():
            genetic_map.download()
        with open(output[0], "w") as f:
            print("File to indicate genetic map has been downloaded", file=f)

rule simulate_to_dadi_sfs:
    output:
        "simulated_data/{org_models}/msprime_joint_sfs_{sim_seeds}_{chrms}.fs"
    # TODO get simulation parameters from stdpopsim, so we can share them easily 
    # with anlysis code below?
    threads: len(chrm_list)
    run: dadi_utils.msprime_to_dadi_simulation(output[0], wildcards.sim_seeds, wildcards.org_models, wildcards.chrms)

sfs_files = expand("simulated_data/{org_models}/msprime_joint_sfs_{sim_seeds}_{chrms}.fs",
            org_models=org_models_list, sim_seeds=seed_array, chrms=chrm_list)
print(sfs_files)
# rule compare_msprime_sfs_to_OutOfAfrica_model:
#     input:
#         [fid for fid in sfs_files if 'GutenkunstThreePopOutOfAfrica' in fid]
#     output:
#         "results_comparison/homo_sapiens_GutenkunstThreePopOutOfAfrica/compare_dadi_to_msprime_joint_sfs_resid_range_50.pdf"
#     run: dadi_utils.compare_msprime_dadi_OutOfAfrica(input,output[0])

rule fit_dadi_model_to_msprime_sfs:
    input:
        sfs_files
    output:
        "results_fits/{org_models}/{demo_models}/model_fit_{sim_seeds}_{fit_seeds}.pdf",
        "results_fits/{org_models}/{demo_models}/model_params_{sim_seeds}_{fit_seeds}.txt"
    threads: len(demo_models_list)*len(org_models_list)*sim_reps*fit_runs
    run: dadi_utils.fit_dadi_model(sfs_files,output[0],output[1], wildcards.demo_models, wildcards.sim_seeds, wildcards.fit_seeds)


rule clean:
    shell:
        "rm -rf simulated_data results_comparison results_fits"
